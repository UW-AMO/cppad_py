-------------------------------------------------------------------------------
          cppad_swig: A C++ Object Library and Swig Interface to Cppad
           Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
$begin news_2017$$
$spell
	Cppad
	xam
	Perl
	vec
	obj
	ptr
	setitem
	txt
	Cygwin
	lang
	Dll
	Jacobian
	bool
$$

$section Cppad Swig Changes during 2017$$

$head 02-24$$
$list number$$
Add calculation of Jacobian sparsity patterns, $cref jac_sparsity$$.
$lnext
Improve the documentation and examples for $cref/vectors/vector/$$.
In addition,
add $cref/vec_bool/vector_ctor/vec_bool/$$ to the list of vector types
$lend

$head 02-23$$
Fix Cygwin version of $codei%make check_lib_%lang%$$ for $icode lang$$ equal to
$code python$$ and $code perl$$. (The execution path needs to include
the directory where the $code cppad_swig_lib$$ Dll is located.)
This make command is still not working on Cygwin when
$icode lang$$ is $code octave$$.

$head 02-22$$
The command $code make check_lib__perl$$
was not working on Cygwin because of an error in
$code lib/example/perl/CMakeLists.txt$$.
This has been fixed (but is still not working on Cygwin).

$head 02-21$$
Add the $cref/supporting packages/cppad_swig/Supporting Packages/$$
heading to aid the install procedure.

$head 02-20$$
$list number$$
Change all the $code size_t$$ variables in the interface to by
$code int$$ (this seems to work better in Swig).
For example
$cref/p/a_fun_forward/p/$$ is not an $code int$$ instead of $code size_t$$.
$lnext
Added class for sparsity patterns $cref sparse_rc$$
(not yet hooked up to sparsity calculations).
$lend

$head 01-18$$
Fix a problem with the perl Swig example
$cref/int_array_class/check_swig_xam.pl/int_array_class/$$.
To be specific,
$codep
	@array_obj[@i] = 2 * i;
$$
was changed to
$codep
	pl_swig_xam::int_array_ptr_setitem(@array_obj, @i, 2 * @i);
$$


$head 01-17$$
$list number$$
Change $code vector_double$$ -> $code vec_double$$ and
$code vector_ad$$ -> $code vec_a_double$$; see
$cref vector_ctor$$.
$lnext
Improve documentation:
Change name of some sections; e.g. cppad_swig_lib -> library.
Fix capitalization of Cppad Swig, M4, and other names in titles
and headings.
Include the
$cref/optimize example/a_fun_optimize/Example/$$
in the documentation.
Move M4 macro $cref/documentation/xam.m4/$$
inside of library section.
$lend

$head 01-16$$
Add
a_double $cref/conditional assignment/a_double_cond_assign/$$,
a_fun $cref/hessian/a_fun_hessian/$$,
a_fun $cref/property/a_fun_property/$$, and
a_fun $cref/optimize/a_fun_optimize/$$.

$head 01-15$$
$list number$$
Add the C++98 standard math functions to the $code a_double$$ class; see
$cref a_double_unary_fun$$.
$lnext
Add $cref/near_equal/a_double_property/near_equal/$$ for
testing purposes.
$lend

$head 01-14$$
Change the Swig example directory, and file names,
from $code example$$ to $code swig_xam$$.
This distinguishes them from the Cppad Swig
examples in $code lib/example$$.
Group the $cref library$$ into one section
and improve documentation of $cref/module names/module/$$.

$head 01-13$$
$list number$$
Change $code error_msg$$ to push and pop error messages
so it handles multiple exceptions and deletes old messages.
$lnext
Move $code error_msg$$ to $cref error_message$$.
$lnext
Map calls to the Cppad error handler to
calls to $code error_message$$.
$lend

$head 01-12$$
Change
$cref xam.m4$$ macros to all start with Capital letters and use Camel case
This is relevant to understanding on Cppad Swig generates examples
for all languages from a single source.

$head 01-11$$
$list number$$
Add exception handling; see $cref error_message$$.
$lnext
Fix the Perl examples / tests
(exception handling revealed they were not working).
$lend

$head 01-10$$
First uploading of this documentation.

$end
