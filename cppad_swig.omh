-------------------------------------------------------------------------------
          cppad_swig: A C++ Object Library and Swig Interface to Cppad
           Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
           GNU Affero General Public License version 3.0 or later see
                      http://www.gnu.org/licenses/agpl.txt
-------------------------------------------------------------------------------
$begin cppad_swig$$
$comment -------------------------------------------------------------
default automatic indexing command for all cppad_swig documentaiton
$$
$aindex section head subhead$$
$comment -------------------------------------------------------------
Latex macros used throughout Cppad Swig documentation
$$
$latex
\newcommand{\B}[1]{ {\rm #1} }
$$
$comment -------------------------------------------------------------$$
$spell
	Cppad
	Linux
	msys
	perl
	Cppad
	cmake
	Affero
	Github
$$

$section A C++ AD Library with a Swig Interface$$

$head Purpose$$
Provide Algorithmic Differentiation (AD),
for any $href%http://www.Swig.org%Swig%$$ scripting language,
using a C++ object library that connects some of the features of
$href%https://www.coin-or.org/Cppad%Cppad%$$.
This interface is limited by the fact that it is for any
scripting language and for C++.
It is expected that one will write special purpose wrapping operations,
in each particular language, to make a more natural interface for that
language.
For example, in Python, one might create
$href%http://www.numpy.org/%numpy%$$ versions of the
$cref vector$$ classes.

$head Getting Started$$
The following is a good place to see what the interface is for
the currently supported languages:
$cref/C++/a_fun_jacobian_xam.cpp/$$,
$cref/Octave/a_fun_jacobian_xam.m/$$,
$cref/Perl/a_fun_jacobian_xam.pm/$$,
$cref/Python/a_fun_jacobian_xam.py/$$.

$head C++ Function Speed$$
One can use Cppad Swig to get faster function evaluation in scripting languages,
when the sequence of floating point operations does not depend on the
independent variables.
Once an $cref a_fun$$ is recorded, zero order
$cref/forward mode/a_fun_forward/$$ can be used to
effectively evaluate the function in C++ instead of the scripting language.

$head Git Repository$$
This is a preliminary version of this package.
Currently, one gets the source code from Github at
$href%https://github.com/bradbell/cppad_swig%cppad_swig%$$.

$head Testing$$
You must first configure Cppad Swig for your system using
$cref%bin/run_cmake.sh%run_cmake.sh%$$.
When you do so, the set of available tests are output
as messages of the form
$codei%
	make check_%name%: available
%$$
You can change into the $code build$$ subdirectory and enter the command
$codei%
	make check_%name%
%$$
for each such test. The command
$codei%
	make check
%$$
will run all of the tests.

$head Support$$
As yet, there is no install procedure for this package.
Part of the problem here is that it would be different for different
scripting languages.
Contact the
$href%http://www.seanet.com/~bradbell/home.htm%author%$$
if you are working with a particular language
and have need of an install procedure or other support.

$head License$$
This program is distributed under the terms of the
GNU Affero General Public License version 3.0 or later see
$href%http://www.gnu.org/licenses/agpl.txt%agpl.txt%$$.

$children%
	bin/run_cmake.sh%
	swig_xam/swig_xam.i%
	lib/library.omh%
	news_2017.omh
%$$
$head Contents$$
$table
$rref run_cmake.sh$$
$rref swig_xam.i$$
$rref library$$
$rref news_2017$$
$tend


$end
