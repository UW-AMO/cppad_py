-------------------------------------------------------------------------------
          cppad_swig: A C++ Object Library and Swig Interface to Cppad
           Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
           GNU Affero General Public License version 3.0 or later see
                      http://www.gnu.org/licenses/agpl.txt
-------------------------------------------------------------------------------
$begin vector_ctor$$
$spell
	Cppad
	av
	Perl
	py
$$

$section Cppad Swig Vector Constructors$$

$head Syntax$$
$icode%v%  = %module_ref_%vector_double%(%n%)
%$$
$icode%av% = %module_ref_%vector_ad%(%n%)
%$$

$head Purpose$$
Creates a vector with $icode n$$ elements.

$head module_ref_$$
This is a reference to the Cppad Swig module which is
language dependent as follows:
$table
C++        $cnext $code cppad_swig::$$ $rnext
Octave     $cnext $code m_cppad.$$     $rnext
Perl       $cnext $code pm_cppad::$$   $rnext
Python     $cnext $code py_cppad.$$
$tend


$head n$$
The argument $icode n$$ is a non-negative integer.
If it is not present, the default value zero is used.

$head v$$
This result is a vector with elements of type $code double$$

$head av$$
This result is a vector with elements of type
$cref a_double$$.

$head Example$$
All of the other vector examples use a
$code vector_double$$ or $code vector_ad$$ constructor.

$end
-------------------------------------------------------------------------------
$begin vector_size$$
$spell
	Cppad
	Perl
	const
$$

$section Size of a Vector$$

$head Syntax$$
$codei%n% = %v%.size()%$$

$head v$$
The object $icode v$$ has one of the following prototypes:
$codei%
	const vector_double& %v%
	const vector_ad&     %v%
%$$

$head n$$
The result has prototype
$codei%
	size_t %n%
%$$
It is the number of elements in the vector $icode v$$
($code size_t$$ is C++ jargon for a non-negative integer type).

$children%
	build/lib/example/cplusplus/vector_size_xam.cpp%
	build/lib/example/octave/vector_size_xam.m%
	build/lib/example/perl/vector_size_xam.pm%
	build/lib/example/python/vector_size_xam.py
%$$
$head Example$$
$cref/C++/vector_size_xam.cpp/$$,
$cref/octave/vector_size_xam.m/$$,
$cref/perl/vector_size_xam.pm/$$,
$cref/python/vector_size_xam.py/$$.

$end
