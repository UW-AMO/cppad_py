-------------------------------------------------------------------------------
          cppad_swig: A C++ Object Library and Swig Interface to Cppad
           Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
           GNU Affero General Public License version 3.0 or later see
                      http://www.gnu.org/licenses/agpl.txt
-------------------------------------------------------------------------------
$begin a_vector_ctor$$
$spell
	Cppad
	av
	Perl
	py
$$

$section Cppad Swig Vector Constructors$$

$head Syntax$$
$icode%v%  = %module_ref% vector_double(%n%)
%$$
$icode%av% = %module_ref% vector_ad(%n%)
%$$

$head Purpose$$
Creates a vector with $icode n$$ elements.

$head module_ref$$
This is a $cref/module reference/module/Module Reference/$$
for the particular language.

$head n$$
The argument $icode n$$ is a non-negative integer.
If it is not present, the default value zero is used.

$head v$$
This result is a vector with elements of type $code double$$

$head av$$
This result is a vector with elements of type
$cref a_double$$.

$head Example$$
All of the other vector examples use a
$code vector_double$$ or $code vector_ad$$ constructor.

$end
-------------------------------------------------------------------------------
$begin a_vector_size$$
$spell
	Cppad
	Perl
	const
$$

$section Size of a Vector$$

$head Syntax$$
$icode%n% = %v%.size()%$$

$head v$$
The object $icode v$$ has one of the following prototypes:
$codei%
	const vector_double& %v%
	const vector_ad&     %v%
%$$

$head n$$
The result has prototype
$codei%
	size_t %n%
%$$
i.e., it is a positive integer.
Its value is the number of elements in the vector $icode v$$.

$children%
	build/lib/example/cplusplus/a_vector_size_xam.cpp%
	build/lib/example/octave/a_vector_size_xam.m%
	build/lib/example/perl/a_vector_size_xam.pm%
	build/lib/example/python/a_vector_size_xam.py
%$$
$head Example$$
$cref/C++/a_vector_size_xam.cpp/$$,
$cref/Octave/a_vector_size_xam.m/$$,
$cref/Perl/a_vector_size_xam.pm/$$,
$cref/Python/a_vector_size_xam.py/$$.

$end
-------------------------------------------------------------------------------
$begin a_vector_set_get$$
$spell
	Cppad
	Perl
	const
$$

$section Setting and Getting Vector Elements$$

$head Syntax$$
$icode%u%[%i%] = %x%
%$$
$icode%y% = %v%[%i%]
%$$

$head i$$
This argument has prototype
$codei%
	size_t %i%
%$$
It must be between zero and the size of the vector minus one.


$head u$$
The object $icode u$$ has one of the following prototypes:
$codei%
	vector_double& %u%
	vector_ad&     %u%
%$$

$head x$$
If $icode u$$ has type $code vector_double$$,
$icode x$$ has prototype
$codei%
	const double& %x%
%$$
If $icode u$$ has type $code vector_ad$$,
$icode x$$ has prototype
$codei%
	const a_double& %x%
%$$

$head v$$
The object $icode v$$ has one of the following prototypes:
$codei%
	const vector_double& %v%
	const vector_ad&     %v%
%$$

$head y$$
If $icode v$$ has type $code vector_double$$,
$icode y$$ has prototype
$codei%
	double %y%
%$$
If $icode v$$ has type $code vector_ad$$,
$icode y$$ has prototype
$codei%
	a_double %y%
%$$

$head Octave$$
Note that Octave uses parenthesis $code ()$$ instead of brackets
$code []$$ for element access.

$head Perl$$
Note that Perl does not support the element syntax above
and instead uses $code set$$ and $code get$$ member functions.

$children%
	build/lib/example/cplusplus/a_vector_set_get_xam.cpp%
	build/lib/example/octave/a_vector_set_get_xam.m%
	build/lib/example/perl/a_vector_set_get_xam.pm%
	build/lib/example/python/a_vector_set_get_xam.py
%$$
$head Example$$
$cref/C++/a_vector_set_get_xam.cpp/$$,
$cref/Octave/a_vector_set_get_xam.m/$$,
$cref/Perl/a_vector_set_get_xam.pm/$$,
$cref/Python/a_vector_set_get_xam.py/$$.

$end
