-------------------------------------------------------------------------------
          cppad_swig: A C++ Object Library and Swig Interface to Cppad
           Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
           GNU Affero General Public License version 3.0 or later see
                      http://www.gnu.org/licenses/agpl.txt
-------------------------------------------------------------------------------
$begin lang_m4$$
$dollar @$$
$escape $$
$spell
	ctor
	printf
	vec
	var
	perl
	xam
	py
	cppad
	bool
	eos
	newline
	std
$$

$section Language Specific m4 Macros$$

$head Purpose$$
For each scripting language, Python, Octave, and Perl,
there is corresponding m4 file
python.m4, octave.m4, and perl.m4.
These files define macros that convert the *.xam files
to examples (and tests) in the corresponding language.
This is the specifications for the macros in an arbitrary scripting language.

$head Convention$$
All macro names end with a lower case letter followed by an under-bar.

$comment ---------------------------------------------------------------$$
$head No Arguments$$

$subhead Ext_$$
This is the file extension (without the $code .$$)
used for scripting language; e.g., $code py$$ for Python files.

$subhead True_$$
This is a constant representing the value true in the scripting language;
e.g. $code True$$ for Python.

$subhead False_$$
This is a constant representing the value false in the scripting language;
e.g. $code True$$ for Python.

$subhead And_$$
This is the logical binary and operator; e.g. $code and$$ for Python.

$subhead Not_$$
This is the logical unary operator not; e.g. $code !$$ for Perl.


$subhead end_$$
This is the text that goes on a line, by itself, to terminate a block
of code; e.g., $code end$$ for Octave.
Note that in Python, the comment symbol $code #$$ is used.
This suffices because the level of indentation (by tabs)
is reduced by one when the block terminates.

$subhead C_$$
This is the text that starts a comment that lasts for the current line;
e.g., $code #$$ for Python.

$subhead Eos_$$
All statements will be following by a newline in the input text.
This macro provides any characters, beside the newline, that are required to
terminate a statement. For example, in C++ it could be $code ;$$.

$subhead Try_$$
This text starts an exception try block.
It is assumed that the block will be terminated by a $code catch_$$.

$subhead catch_$$
This text terminates a try block and starts an exception catch block.
It is assumed that the block will be terminated by an $code end_$$.

$subhead eof_$$
This is extra text that should be added at the end of file.
(For some strange reason, perl requires a true value at the end of
each $icode%*%.pm%$$ file.)

$comment ---------------------------------------------------------------$$
$head Module_$$

$subhead No Arguments$$
If $code Module_$$ has no arguments,
it is the name of the module in $cref example.i$$
for scripting language; e.g., $code py_cppad$$ for Python.

$subhead One Argument$$
The text corresponding to
$codei|
	Module_(|name|)
|$$
references the specified name in the swig module.
For example, in Octave it might be
$codei|
	m_cppad.|name|
|$$

$subhead Constructor$$
The text corresponding to
$codei|
	ModuleCtor_(|name|)
|$$
references the specified constructor in the swig module.
For example, in Octave it might be
$codei|
	m_cppad.|name|
|$$
while in Perl it could be
$codei|
	new pm_cppad::|name|
|$$
$comment ---------------------------------------------------------------$$

$head Non-Statements With Arguments$$

$subhead Var_$$
The text corresponding to
$codei|
	Var_(|variable|)
|$$
retrieves the value of the specified variable.
For example, in Python it could be $icode variable$$
while in Perl it could be $codei|@|variable|$$.

$subhead member_$$
The text corresponding to
$codei|
	member_(|variable|, |name|)
|$$
references the specified member function or data
in the context of the specified variable.
For example, in C++ it might be
$codei|
	|variable|.|name|
|$$

$subhead StringEqual_$$
The text corresponding to
$codei|
	StringEqual_(|left|, |right|)
|$$
results in true (false), if the string $icode left$$
is equal (not equal) to the string $icode right$$.
(Note that in C++, left operand must be a
$code std::string$$ while the right might be a $code char*$$.)

$comment ---------------------------------------------------------------$$
$head Assignment Statements$$

$subhead NewVar_$$
The text corresponding to
$codei|
	NewVar_(|type|, |variable|, |value|)
|$$
declares the new specified variable with the specified type
and assigns it the specified value.
For example, in Octave it could be
$codei|
	|variable| = |value|;
|$$
Note the semi-colon at the end which suppressed printing the value
(in the Octave language).
In C++, it could be
$codei|
	|type| |variable| = |value|;
|$$

$subhead Assign_$$
The text corresponding to
$codei|
	Assign_(|variable|, |value|)
|$$
assigns the specified value to an existing variable.
For example, in Python it could be
$codei|
	|variable| = |value|
|$$

$subhead AndAssign_$$
The text corresponding to
$codei|
	AndAssign_(|variable|, |value|)
|$$
assigns the specified logical variable to the binary expression
of itself and the value.
For example, in Octave it could be
$codei|
	|variable| = |variable| && |value|;
|$$

$comment ---------------------------------------------------------------$$

$head Vector Operations$$

$subhead VecSet_$$
The text corresponding to
$codei|
	VecSet_(|vector|, |index|, |value|)
|$$
sets the element with the specified index, in the specified vector, to the
specified value.
For example, in Python it might be
$codei|
	|vector|[|index|] = |value|
|$$



$subhead VecGet_$$
The text corresponding to
$codei|
	VecGet_(|vector|, |index|)
|$$
gets the value of the element with the specified index,
in the specified vector.
For example, in Perl it might be
$codei|
	@|vector|->get(|index|)
|$$

$comment ---------------------------------------------------------------$$

$head Function Statements$$

$subhead BeginBoolFun__$$
The text corresponding to
$codei|
	BeginBoolFun__(|return_variable|, |function_name|)
|$$
is placed at the beginning of function that has zero arguments
and a boolean return value.
This must initialize $icode return_variable$$ as true.
For example, in Octave it might be
$codei|
	function |return_variable| = |function_name|()
		%
		% load the Cppad Swig library
		m_cppad
		%
		% initialize return value
		|return_variable| = true;
|$$
Note that this begins a block of code that will be terminated
by a corresponding $code end_$$.
The argument $icode function_name$$ should be related to
the xam input file as follows:
$cref/function_name/xam_file_name.m4/function_name/$$.


$subhead return_$$
The text corresponding to
$codei|
	return_(|return_variable|)
|$$
terminates the current function with the specified return value.
For example, in Python it might be
$codei|
	return |return_variable|
|$$
The block inside this function is terminated by a matching
$cref/end_/lang_m4/No Arguments/end_/$$.


$comment ---------------------------------------------------------------$$
$head Other$$

$subhead BeginFor_ Statement$$
The text corresponding to
$codei|
	begin_for(|variable|, |upper|)
|$$
starts a for loop the specified index variable.
The initial value of the variable is zero.
The variable increases by one each time through the loop.
The value of the index the last time through the loop is $icode|upper|-1|$$.
The block inside the loop is terminated by a matching
$cref/end_/lang_m4/No Arguments/end_/$$.

$subhead print_tExt_ Statement$$
The text corresponding to
$codei|
	print_tExt_(|argument|)
|$$
prints the text specified by $icode argument$$ followed by a new line.
For example, in Octave it might be
$codei|
	printf('argument\n')
|$$

$end
