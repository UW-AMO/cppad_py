include(xam.m4)dnl this comments out end of line character
Header_(sparse/hes_xam.xam)
C_ -----------------------------------------------------------------------------
C_         cppad_swig: A C++ Object Library and Swig Interface to Cppad
C_          Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
C_              This program is distributed under the terms of the
C_              GNU General Public License version 3.0 or later see
C_                    https://www.gnu.org/licenses/gpl-3.0.txt
C_ -----------------------------------------------------------------------------
C_ sparse_hes
C_ -----------------------------------------------------------------------------
C_ BEGIN SOURCE
BeginBoolFun_(ok, sparse_hes_xam)
	C_ number of dependent and independent variables
	NewVar_(int, n, 3)
	C_
	C_ create the independent variables ax
	NewVar_(vec_double, x, ModuleCtor_(vec_double)(Var_(n)))
	For_(i, Var_(n) )
		VecSet_(x, Var_(i), Var_(i) + 2.0)
	End_
	NewVar_(vec_a_double, ax, Module_(independent)(Var_(x)))
	C_
	C_ ay[i] = j * ax[j] * ax[i]
	C_ where i = mod(j + 1, n)
	NewVar_(vec_a_double, ay, ModuleCtor_(vec_a_double)(Var_(n)))
	For_(j, Var_(n) )
		NewVar_(int, i, Var_(j)+1)
		If_( Var_(i) >= Var_(n) )
			Assign_(i, Var_(i) - Var_(n))
		End_
		NewVar_(a_double, aj, ModuleCtor_(a_double)(Var_(j)))
		NewVar_(a_double, ax_j, VecGet_(ax, Var_(j)))
		NewVar_(a_double, ax_i, VecGet_(ax, Var_(i)))
		VecSet_(ay, Var_(i), Var_(aj) * Var_(ax_j) * Var_(ax_i))
	End_
	C_
	C_ define af corresponding to f(x)
	NewVar_(a_fun, af, ModuleCtor_(a_fun)(Var_(ax), Var_(ay)))
	C_
	C_ Set select_d (domain) to all true,
	C_ initial select_r (range) to all false
	C_ initialize r to all zeros
	NewVar_(vec_bool, select_d, ModuleCtor_(vec_bool)(Var_(n)))
	NewVar_(vec_bool, select_r, ModuleCtor_(vec_bool)(Var_(n)))
	NewVar_(vec_double, r, ModuleCtor_(vec_double)(Var_(n)))
	For_(i, Var_(n))
		VecSet_(select_d, Var_(i), True_)
		VecSet_(select_r, Var_(i), False_)
		VecSet_(r, Var_(i), 0.0)
	End_
	C_
	C_ only select component n-1 of the range function
	C_ f_0 (x) = (n-1) * x_{n-1} * x_0
	VecSet_(select_r, 0, True_)
	VecSet_(r, 0, 1.0)
	C_
	C_ sparisty pattern for Hessian
	NewVar_(sparse_rc, pattern, ModuleCtor_(sparse_rc)())
	Member_(af, for_hes_sparsity)(Var_(select_d), Var_(select_r), Var_(pattern))Eos_
	C_
	C_ compute all possibly non-zero entries in Hessian
	C_ (should only compute lower triangle becuase matrix is symmetric)
	NewVar_(sparse_rcv, subset, ModuleCtor_(sparse_rcv)(Var_(pattern)))
	C_
	C_ work space used to save time for multiple calls
	NewVar_(sparse_hes_work, work, ModuleCtor_(sparse_hes_work)())
	C_
	Member_(af, sparse_hes)(Var_(subset), Var_(x), Var_(r), Var_(pattern), Var_(work))Eos_
	C_
	C_ check that result is sparsity pattern for Hessian of f_0 (x)
	AndAssign_(ok, Member_(subset, nnz)() == 2 )
	NewVar_(vec_int, row, Member_(subset, row)())
	NewVar_(vec_int, col, Member_(subset, col)())
	NewVar_(vec_double, val, Member_(subset, val)())
	For_(k, 2)
		NewVar_(int, i, VecGet_(row, Var_(k)))
		NewVar_(int, j, VecGet_(col, Var_(k)))
		NewVar_(double, v, VecGet_(val, Var_(k)))
		If_( Var_(i) <= Var_(j) )
			AndAssign_(ok, Var_(i) == 0)
			AndAssign_(ok, Var_(j) == Var_(n)-1)
		End_
		If_( Var_(i) >= Var_(j) )
			AndAssign_(ok, Var_(i) == Var_(n)-1)
			AndAssign_(ok, Var_(j) == 0)
		End_
		AndAssign_(ok, Var_(v) == Var_(n)-1)
	End_
	C_
	Return_(ok)
End_
C_ END SOURCE
C_
Omhelp_(sparse_hes_xam,
LangName_: Hessian Sparsity Patterns: Example and Test)
Eof_
