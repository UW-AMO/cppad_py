include(xam.m4)dnl this comments out end of line character
Header_(a_fun/reverse_xam.xam)
C_ -----------------------------------------------------------------------------
C_         cppad_swig: A C++ Object Library and Swig Interface to Cppad
C_          Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
C_              This program is distributed under the terms of the
C_          GNU Affero General Public License version 3.0 or later see
C_                     http://www.gnu.org/licenses/agpl.txt
C_ -----------------------------------------------------------------------------
C_ std::vector<a_double>
C_ -----------------------------------------------------------------------------
C_ BEGIN SOURCE
BeginBoolFun_(ok, a_fun_reverse_xam)
	C_ number of dependent and independent variables
	NewVar_(size_t, m, 1)
	NewVar_(size_t, n, 3)
	C_
	C_ create the independent variables ax
	NewVar_(vector_double, xp, ModuleCtor_(vector_double)(Var_(n)))
	For_(i, Var_(n) )
		VecSet_(xp, Var_(i), Var_(i))
	End_
	NewVar_(vector_ad, ax, Module_(independent)(Var_(xp)))
	C_
	C_ create dependent variables ay with ay0 = ax_0 * ax_1 * ax_2
	NewVar_(a_double, ax_0, VecGet_(ax, 0))
	NewVar_(a_double, ax_1, VecGet_(ax, 1))
	NewVar_(a_double, ax_2, VecGet_(ax, 2))
	NewVar_(vector_ad, ay, ModuleCtor_(vector_ad)(Var_(m)))
	VecSet_(ay, 0, Var_(ax_0) * Var_(ax_1) * Var_(ax_2))
	C_
	C_ define af corresponding to f(x) = x_0 * x_1 * x_2
	NewVar_(a_fun, af, ModuleCtor_(a_fun)(Var_(ax), Var_(ay)))
	C_ -----------------------------------------------------------------------
	C_ define          X(t) = (x_0 + t, x_1 + t, x_2 + t)
	C_ it follows that Y(t) = f(X(t)) = (x_0 + t) * (x_1 + t) * (x_2 + t)
	C_ and that       Y'(0) = x_1 * x_2 + x_0 * x_2 + x_0 * x_1
	C_ -----------------------------------------------------------------------
	C_ zero order forward mode
	NewVar_(size_t, p, 0)
	VecSet_(xp, 0, 2.0)
	VecSet_(xp, 1, 3.0)
	VecSet_(xp, 2, 4.0)
	NewVar_(vector_double, yp, Member_(af, forward)(Var_(p), Var_(xp)))
	AndAssign_(ok, VecGet_(yp, 0) == 24.0)
	C_ -----------------------------------------------------------------------
	C_ first order reverse (derivative of zero order forward)
	C_ define G( Y ) = y_0 = x_0 * x_1 * x_2
	NewVar_(size_t, q, 1)
	NewVar_(vector_double, yq1, ModuleCtor_(vector_double)(Var_(m)))
	VecSet_(yq1, 0, 1.0)
	NewVar_(vector_double, xq1, Member_(af, reverse)(Var_(q), Var_(yq1)))
	C_ partial G w.r.t x_0
	AndAssign_(ok, VecGet_(xq1, 0) == 3.0 * 4.0 )
	C_ partial G w.r.t x_1
	AndAssign_(ok, VecGet_(xq1, 1) == 2.0 * 4.0 )
	C_ partial G w.r.t x_2
	AndAssign_(ok, VecGet_(xq1, 2) == 2.0 * 3.0 )
	C_ -----------------------------------------------------------------------
	C_ first order forward mode
	Assign_(p, 1)
	VecSet_(xp, 0, 1.0)
	VecSet_(xp, 1, 1.0)
	VecSet_(xp, 2, 1.0)
	Assign_(yp, Member_(af, forward)(Var_(p), Var_(xp)))
	AndAssign_(ok, VecGet_(yp, 0) == 3.0*4.0 + 2.0*4.0 + 2.0*3.0)
	C_ -----------------------------------------------------------------------
	C_ second order reverse (derivative of first order forward)
	C_ define G( y_0^0 , y_0^1 ) = y_0^1
	C_ = x_1^0 * x_2^0  +  x_0^0 * x_2^0  +  x_0^0  *  x_1^0
	Assign_(q, 2)
	NewVar_(vector_double, yq2, ModuleCtor_(vector_double)(Var_(m) * Var_(q)))
	VecSet_(yq2, 0 * Var_(q) + 0, 0.0) C_ partial of G w.r.t y_0^0
	VecSet_(yq2, 0 * Var_(q) + 1, 1.0) C_ partial of G w.r.t y_0^1
	NewVar_(vector_double, xq2, Member_(af, reverse)(Var_(q), Var_(yq2)))
	C_ partial G w.r.t x_0^0
	AndAssign_(ok, VecGet_(xq2, 0 * Var_(q) + 0) == 3.0 + 4.0)
	C_ partial G w.r.t x_1^0
	AndAssign_(ok, VecGet_(xq2, 1 * Var_(q) + 0) == 2.0 + 4.0)
	C_ partial G w.r.t x_2^0
	AndAssign_(ok, VecGet_(xq2, 2 * Var_(q) + 0) == 2.0 + 3.0)
	C_ -----------------------------------------------------------------------
	C_
	Return_(ok)
End_
C_ END SOURCE
C_
Omhelp_(a_fun_reverse_xam,
LangName_: Reverse Mode AD: Example and Test)
Eof_
