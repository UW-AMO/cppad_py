include(xam.m4)dnl this comments out end of line character
header_(a_fun/reverse_xam.xam)
c_ -----------------------------------------------------------------------------
c_         cppad_swig: A C++ Object Library and Swig Interface to Cppad
c_          Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
c_              This program is distributed under the terms of the
c_          GNU Affero General Public License version 3.0 or later see
c_                     http://www.gnu.org/licenses/agpl.txt
c_ -----------------------------------------------------------------------------
c_ std::vector<a_double>
c_ -----------------------------------------------------------------------------
c_ BEGIN SOURCE
begin_bool_fun_0_(ok, a_fun_reverse_xam)
	c_ number of dependent and independent variables
	new_var_(size_t, m, 1)
	new_var_(size_t, n, 3)
	c_
	c_ create the independent variables ax
	new_var_new_(vector_double, xp, module_(vector_double)(var_(n)))
	begin_for_(i, var_(n) )
		vec_set_(xp, var_(i), var_(i))
	end_
	new_var_(vector_ad, ax, module_(independent)(var_(xp)))
	c_
	c_ create dependent variables ay with ay0 = ax_0 * ax_1 * ax_2
	new_var_(a_double, ax_0, vec_get_(ax, 0))
	new_var_(a_double, ax_1, vec_get_(ax, 1))
	new_var_(a_double, ax_2, vec_get_(ax, 2))
	new_var_new_(vector_ad, ay, module_(vector_ad)(var_(m)))
	vec_set_(ay, 0, var_(ax_0) * var_(ax_1) * var_(ax_2))
	c_
	c_ define af corresponding to f(x) = x_0 * x_1 * x_2
	new_var_new_(a_fun, af, module_(a_fun)(var_(ax), var_(ay)))
	c_ -----------------------------------------------------------------------
	c_ define          X(t) = (x_0 + t, x_1 + t, x_2 + t)
	c_ it follows that Y(t) = f(X(t)) = (x_0 + t) * (x_1 + t) * (x_2 + t)
	c_ and that       Y'(0) = x_1 * x_2 + x_0 * x_2 + x_0 * x_1
	c_ -----------------------------------------------------------------------
	c_ zero order forward mode
	new_var_(size_t, p, 0)
	vec_set_(xp, 0, 2.0)
	vec_set_(xp, 1, 3.0)
	vec_set_(xp, 2, 4.0)
	new_var_(vector_double, yp, member_(af, forward)(var_(p), var_(xp)))
	and_assign_(ok, vec_get_(yp, 0) == 24.0)
	c_ -----------------------------------------------------------------------
	c_ first order reverse (derivative of zero order forward)
	c_ define G( Y ) = y_0 = x_0 * x_1 * x_2
	new_var_(size_t, q, 1)
	new_var_new_(vector_double, yq1, module_(vector_double)(var_(m)))
	vec_set_(yq1, 0, 1.0)
	new_var_(vector_double, xq1, member_(af, reverse)(var_(q), var_(yq1)))
	c_ partial G w.r.t x_0
	and_assign_(ok, vec_get_(xq1, 0) == 3.0 * 4.0 )
	c_ partial G w.r.t x_1
	and_assign_(ok, vec_get_(xq1, 1) == 2.0 * 4.0 )
	c_ partial G w.r.t x_2
	and_assign_(ok, vec_get_(xq1, 2) == 2.0 * 3.0 )
	c_ -----------------------------------------------------------------------
	c_ first order forward mode
	assign_(p, 1)
	vec_set_(xp, 0, 1.0)
	vec_set_(xp, 1, 1.0)
	vec_set_(xp, 2, 1.0)
	assign_(yp, member_(af, forward)(var_(p), var_(xp)))
	and_assign_(ok, vec_get_(yp, 0) == 3.0*4.0 + 2.0*4.0 + 2.0*3.0)
	c_ -----------------------------------------------------------------------
	c_ second order reverse (derivative of first order forward)
	c_ define G( y_0^0 , y_0^1 ) = y_0^1
	c_ = x_1^0 * x_2^0  +  x_0^0 * x_2^0  +  x_0^0  *  x_1^0
	assign_(q, 2)
	new_var_new_(vector_double, yq2, module_(vector_double)(var_(m) * var_(q)))
	vec_set_(yq2, 0 * var_(q) + 0, 0.0) c_ partial of G w.r.t y_0^0
	vec_set_(yq2, 0 * var_(q) + 1, 1.0) c_ partial of G w.r.t y_0^1
	new_var_(vector_double, xq2, member_(af, reverse)(var_(q), var_(yq2)))
	c_ partial G w.r.t x_0^0
	and_assign_(ok, vec_get_(xq2, 0 * var_(q) + 0) == 3.0 + 4.0)
	c_ partial G w.r.t x_1^0
	and_assign_(ok, vec_get_(xq2, 1 * var_(q) + 0) == 2.0 + 4.0)
	c_ partial G w.r.t x_2^0
	and_assign_(ok, vec_get_(xq2, 2 * var_(q) + 0) == 2.0 + 3.0)
	c_ -----------------------------------------------------------------------
	c_
	return_(ok)
end_
c_ END SOURCE
c_
omhelp_(a_fun_reverse_xam,
language_: Reverse Mode AD: Example and Test)
eof_
