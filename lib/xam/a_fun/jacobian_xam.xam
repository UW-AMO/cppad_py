include(xam.m4)dnl this comments out end of line character
header_(a_fun/jacobian_xam.xam)
c_ -----------------------------------------------------------------------------
c_         cppad_swig: A C++ Object Library and Swig Interface to Cppad
c_          Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
c_              This program is distributed under the terms of the
c_          GNU Affero General Public License version 3.0 or later see
c_                     http://www.gnu.org/licenses/agpl.txt
c_ -----------------------------------------------------------------------------
c_ std::vector<a_double>
c_ -----------------------------------------------------------------------------
c_ BEGIN SOURCE
begin_bool_fun_0_(ok, a_fun_jacobian_xam)
	c_ number of dependent and independent variables
	new_var_(size_t, m, 1)
	new_var_(size_t, n, 3)
	c_
	c_ create the independent variables ax
	new_var_new_(vector_double, x, module_(vector_double)(n))
	begin_for_(i, var_(n) )
		vec_set_(x, var_(i), var_(i) + 2.0)
	end_
	new_var_(vector_ad, ax, module_(independent)(x))
	c_
	c_ create dependent variables ay with ay0 = ax_0 * ax_1 * ax_2
	new_var_(a_double, ax_0, vec_get_(ax, 0))
	new_var_(a_double, ax_1, vec_get_(ax, 1))
	new_var_(a_double, ax_2, vec_get_(ax, 2))
	new_var_new_(vector_ad, ay, module_(vector_ad)(m))
	vec_set_(ay, 0, var_(ax_0) * var_(ax_1) * var_(ax_2))
	c_
	c_ define af corresponding to f(x) = x_0 * x_1 * x_2
	new_var_new_(a_fun, af, module_(a_fun)(var_(ax), var_(ay)))
	c_
	c_ compute the Jacobian f'(x) = ( x_1*x_2, x_0*x_2, x_0*x_1 )
	new_var_new_(vector_double, fp, member_(af, jacobian)(x))
	c_
	c_ check Jacobian
	new_var_(double, x_0, vec_get_(x, 0))
	new_var_(double, x_1, vec_get_(x, 1))
	new_var_(double, x_2, vec_get_(x, 2))
	and_assign_(ok, vec_get_(fp, 0 * n + 0) == x_1 * x_2 )
	and_assign_(ok, vec_get_(fp, 0 * n + 1) == x_0 * x_2 )
	and_assign_(ok, vec_get_(fp, 0 * n + 2) == x_0 * x_1 )
	c_
	return_(ok)
end_
c_ END SOURCE
c_
omhelp_(a_fun_jacobian_xam,
language_: General Jacobian Using AD: Example and Test)
eof_
