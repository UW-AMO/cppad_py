include(xam.m4)dnl this comments out end of line character
Header_(a_fun/jacobian_xam.xam)
C_ -----------------------------------------------------------------------------
C_         cppad_swig: A C++ Object Library and Swig Interface to Cppad
C_          Copyright (C) 2017-17 Bradley M. Bell (bradbell@seanet.com)
C_              This program is distributed under the terms of the
C_          GNU Affero General Public License version 3.0 or later see
C_                     http://www.gnu.org/licenses/agpl.txt
C_ -----------------------------------------------------------------------------
C_ std::vector<a_double>
C_ -----------------------------------------------------------------------------
C_ BEGIN SOURCE
BeginBoolFun_(ok, a_fun_jacobian_xam)
	C_ number of dependent and independent variables
	NewVar_(size_t, n_dep, 1)
	NewVar_(size_t, n_ind, 3)
	C_
	C_ create the independent variables ax
	NewVar_(vec_double, x, ModuleCtor_(vec_double)(Var_(n_ind)))
	For_(i, Var_(n_ind) )
		VecSet_(x, Var_(i), Var_(i) + 2.0)
	End_
	NewVar_(vec_a_double, ax, Module_(independent)(Var_(x)))
	C_
	C_ create dependent variables ay with ay0 = ax_0 * ax_1 * ax_2
	NewVar_(a_double, ax_0, VecGet_(ax, 0))
	NewVar_(a_double, ax_1, VecGet_(ax, 1))
	NewVar_(a_double, ax_2, VecGet_(ax, 2))
	NewVar_(vec_a_double, ay, ModuleCtor_(vec_a_double)(Var_(n_dep)))
	VecSet_(ay, 0, Var_(ax_0) * Var_(ax_1) * Var_(ax_2))
	C_
	C_ define af corresponding to f(x) = x_0 * x_1 * x_2
	NewVar_(a_fun, af, ModuleCtor_(a_fun)(Var_(ax), Var_(ay)))
	C_
	C_ compute the Jacobian f'(x) = ( x_1*x_2, x_0*x_2, x_0*x_1 )
	NewVar_(vec_double, fp, Member_(af, jacobian)(Var_(x)))
	C_
	C_ check Jacobian
	NewVar_(double, x_0, VecGet_(x, 0))
	NewVar_(double, x_1, VecGet_(x, 1))
	NewVar_(double, x_2, VecGet_(x, 2))
	AndAssign_(ok, VecGet_(fp, 0 * Var_(n_ind) + 0) == Var_(x_1) * Var_(x_2) )
	AndAssign_(ok, VecGet_(fp, 0 * Var_(n_ind) + 1) == Var_(x_0) * Var_(x_2) )
	AndAssign_(ok, VecGet_(fp, 0 * Var_(n_ind) + 2) == Var_(x_0) * Var_(x_1) )
	C_
	Return_(ok)
End_
C_ END SOURCE
C_
Omhelp_(a_fun_jacobian_xam,
LangName_: General Jacobian Using AD: Example and Test)
Eof_
